import ordset.

main =>
  G = read_file_lines(),
  Regs = find_all(X,find_region(G,C,X)),
  [A*P : {_,_,A,P} in Regs].sum.println.

find_region(G,C,R) ?=>
  nth(Y,G,Row),
  nth(X,Row,C),
  Start = {X,Y},
  not get_global_map(visited).has_key(Start),
  Region = new_set(),
  expand_region(G,[Start],0,C,Region,Perimeter),

  Corners = 0,
  foreach (P in Region.keys)
    Cs = find_all(P2,corner(P,Region,P2)),
    Corners := Corners + Cs.remove_dups.len,
  end,
  println(corners=Corners),
  Perimeter := Corners,

  First_loc = Region.keys.sort.head,
  R = {C,First_loc,Region.size,Perimeter}.

in_bounds({X,Y},G) =>
  nth(Y,G,R),
  nth(X,R,_).

empty({X2,Y2},C,G) => not (in_bounds({X2,Y2},G) && C == G[Y2,X2]).

expand_region(G,[],Edges,C,Region,All_edges) => All_edges=Edges.
expand_region(G,[{X,Y}|Q],Edges,C,Region,All_edges) =>
  Corners = 0,

  if not Region.has_key({X,Y}) then
    Region.put({X,Y}),
    get_global_map(visited).put({X,Y}),

    % check all four corners
    foreach ({I,J} in {{1,0},{0,1},{-1,0},{0,-1}})
      {X2,Y2} = {X+I,Y+J},
      % outside region, save the edge (position and direction towards the void) for later
      if not empty({X2,Y2},C,G) then
        % add connected nodes to the queue
        append(Q,[{X2,Y2}],Q2),
        Q := Q2
      end
    end,
  end,

  expand_region(G,Q,Edges + Corners,C,Region,All_edges).

corner({X,Y},Region,P2) ?=>
  println(c={X,Y,Region}),
  member(I,[-1,1]),
  member(J,[-1,1]),
  P2 = {X+I,Y+J},
  % no corner cell, or no neighbour of this cell is a neighbour of the corner cell
  not (
    Region.has_key(P2),
    Ns = find_all(P,neighbour({X,Y},Region,P)).new_ordset,
    Corner_ns = find_all(P3,neighbour(P2,Region,P3)).new_ordset,
    Ns.intersection(Corner_ns).len > 0
    ),
  println(corner_found=P2).

neighbour({X,Y},Region,P) ?=>
  between(-1,1,I),
  between(-1,1,J),
  (I == 0 ; J == 0),
  P = {X+I,Y+J},
  Region.has_key(P).
