main =>
  G = read_file_lines(),
  find_thing(G,'S',{Sx,Sy}),
  find_thing(G,'E',{Ex,Ey}),
  get_global_map(grid).put(1,G),

  garbage_collect(800000000),

  % all distances from start
  Dists = new_map(),
  dijkstra(G,{Sx,Sy},0,successors,Dists),
  Best_cost = Dists.get({Ex,Ey}),
  println(dijkstra_best=Best_cost),

  % all distances from end
  Rdists = new_map(),
  dijkstra(G,{Ex,Ey},0,successors,Rdists),

  Ps = find_all({P1,P2},cheat(G,{Sx,Sy},{Ex,Ey},Dists,Rdists,Best_cost,P1,P2)),
  println(Ps.len).

cheat(G,Start,End,Dists,Rdists,Best_cost,P1,P2) ?=>
  nth(Y,G,Row),
  nth(X,Row,'#'),
  member({I1,J1}, [{-1,0},{1,0},{0,1},{0,-1}]),
  between(1,G.len,Y+J1),
  between(1,G[1].len,X+I1),
  (G[Y+J1,X+I1] == '.' || G[Y+J1,X+I1] == 'S'),

  member({I2,J2}, [{-1,0},{1,0},{0,1},{0,-1}]),
  between(1,G.len,Y+J2),
  between(1,G[1].len,X+I2),
  (G[Y+J2,X+I2] == '.' || G[Y+J2,X+I2] == 'E'),

  A_cost = Dists.get({X+I1,Y+J1}),
  B_cost = Rdists.get({X+I2,Y+J2}),
  C = A_cost + 2 + B_cost,
  Saving = Best_cost - C,
  Saving >= 100,
  P1 = {X+I1,Y+J1},
  P2 = {X+I2,Y+J2},
  printf("cheat_cost %w, saving %w\n", C, Saving).

show(G) =>
  foreach (L in G)
    println(L)
  end,
  nl.

find_thing(G,C,S0) ?=>
  nth(Y,G,Row),
  nth(X,Row,C),
  S0 = {X,Y}.

dijkstra(G,Start,Init_cost,Successor_fn,Dists) =>
  Q = new_min_heap([{Init_cost,Start}]),
  Dists.put(Start, 0),
  Seen = new_set(),
  Inf = maxint_small(),

  while (Q.heap_size() > 0)
    {Cost,S} = Q.heap_pop(),
    if not(Seen.has_key(S)) then
      Seen.put(S),
      {X,Y} = S,
      foreach ({S1,Move_cost} in apply(Successor_fn,X,Y,G))
        Dists.put(S1, min(Dists.get(S1,Inf), Cost+Move_cost)),
        Q.heap_push({Cost+Move_cost,S1})
      end,
    end,
  end.

moves(X,Y) = [{X+1,Y},{X-1,Y},{X,Y+1},{X,Y-1}].

successors(X,Y,G) = find_all({S1,Cost}, successor(X,Y,G,S1,Cost)).

successor(X,Y,G,S1,Cost) ?=>
  member({X2,Y2}, moves(X,Y)),
  nth(Y2,G,Row),
  nth(X2,Row,C),
  member(C,".12SE"),
  Cost = 1,
  S1 = {X2,Y2}.
