import regex.
import util.

main =>
  {Init,Gate_list} = read_file_chars().go,
  Wires = new_map(),
  foreach ([Wire,X] in Init)
    Wires.put(Wire,X.to_int)
  end,
  println(Wires),

  Gates = new_set(Gate_list),
  println(gates=Gates),

  find_swapped_wires(Wires,Gates,Out),
  println(out=Out).

find_swapped_wires(Wires,Gates,Out) ?=>
  Keys = Gates.keys,
  Swapped = new_set(),
  println(search),
  foreach (I in 1..8)
    member(Gate,Keys), not Swapped.has_key(Gate), Swapped.put(Gate),
  end,
  foreach (I in 1..4)
    J = (I-1)*2+1,
    J2 = J+1,
    Gates.del(Keys[J]),
    Gates.del(Keys[J+1]),
    [A1,Op1,B1,Dest1] = Keys[J],
    [A2,Op2,B2,Dest2] = Keys[J2],
    Gates.put(Keys[J]),
    Gates.put(Keys[J2]),
  end,
  %println(ok=Gates),

  foreach (I in 1..100)
    println(check=I),
    X = random() mod 2**46,
    Y = random() mod 2**46,
    Xv = X.to_binvector(),
    Yv = Y.to_binvector(),
    W = new_set(),
    foreach (D in 1..Xv.len)
      W.put(to_fstring("x%02d",D-1),Xv[D]),
      W.put(to_fstring("y%02d",D-1),Yv[D]),
    end,
    %println(w=[W,X,Y]),
    X + Y = run(W,Gates)
  end,
  println(done=Swapped),
  Out = Swapped.

run(Wires,Gates) = R =>
  Count = Gates.len * 2, % fudge to avoid infinite loops
  while (Gates.size > 0 && Count > 0)
    %println(Gates.size),
    foreach (Gate in Gates.keys)
      [A,Op,B,Dest] = Gate,
      if Wires.has_key(A) && Wires.has_key(B) then
        Wires.put(Dest,op(Op,A,B,Wires)),
        Gates.del(Gate),
      end
    end
  end,
  Outs = [{K.tail.to_int,V} : K=V in Wires, K[1]='z'].sort.reverse.map(last),
  %println(Outs),
  R = fold(from_bin,0,Outs).

to_binvector(X) = ([0:_ in 1..45] ++ [D.ord-48: D in to_binary_string(X)]).reverse.take(45).reverse.
from_bin(X,Acc) = Acc*2 + X.

op("AND",A,B,W) = W.get(A) * W.get(B).
op("OR",A,B,W) = max(W.get(A),W.get(B)).
op("XOR",A,B,W) = (W.get(A) - W.get(B))**2.

go(S) = R =>
  Init = regex_find_all("(.+): (\\d)", S),
  Gates = regex_find_all("(.+) (AND|OR|XOR) (.+) -\\> (\\w+)", S),
  R = {Init,Gates}.
