% Part 2 program mostly liberated from Hakan Kjellerstrand

import sat.
import regex.
import util.

main => read_file_chars().parse.go.

go({Inits,Gate_list}) => 
  Gs = new_map(),
  Regs = [],

  % build a list of variables for all registers + map of register name to its index
  %println(gates=Gate_list),
  foreach([G1,_,G2,Res] in Gate_list)
    %println(group=[G1,G2,Res]),
    foreach (Reg in [G1,G2,Res])
      if not Gs.has_key(Reg) then
        X :: 0..1,
        Regs := [X|Regs],
        Gs.put(Reg,Regs.len),
      end,
    end,
  end,
  %println(gs=Gs),

  N = Gs.size,

  Gate_count = Gate_list.len,

  % Outputs maps from gate index to output register
  Outputs = new_array(Gate_count),
  Outputs :: 0..1,
  % indirection table for output registers
  Index = new_array(Gate_count),
  Index :: 1..Gate_count,
  all_different(Index),
  % swaps: Index[I] #!= I implies a register has been swapped with another gate
  Swapped = new_array(Gate_count),
  foreach (I in 1..Gate_count)
    [G1,Op,G2,Reg] = Gate_list[I],
    V #= Regs[Gs.get(Reg)],
    Outputs[I] #= V,
    element(I,Index,I2),
    element(I2,Index,I),
    I #!= I2 #=> Swapped[I] #= 1,
    I #= I2 #=> Swapped[I] #= 0,
  end,
  exactly(8,Swapped,1),

  % now encode the instructions
  foreach(I in 1..Gate_count)
    [G1,Op,G2,Out_name] = Gate_list[I],
    X1 = Regs[Gs.get(G1)],
    X2 = Regs[Gs.get(G2)],
    Reg = Regs[Gs.get(Out_name)],

    Out_i #= Index[I],
    % why does this help? we already did it...
    Swapped[I] #= 1 #=> Out_i #!= I,
    Swapped[I] #= 0 #=> Out_i #= I,
    element(Out_i,Outputs,Out),
    op(X1,Op,X2,Out),
    %if Res.first == 'z' then
    %  Zs := Zs ++ [Res]
    %end
  end,
  % count counterexample...
  Bits = 45, % yeah, hardcode for now
  Xs = new_array(Bits), Ys = new_array(Bits), Zs = new_array(Bits + 1),
  assign_number(Xs,"x",Regs,Gs,X),
  assign_number(Ys,"y",Regs,Gs,Y),
  assign_number(Zs,"z",Regs,Gs,Z),
  println(c=[X,Y,Z]),
  Counterexample = new_array(1),
  Counterexample :: 0..1,
  % I'm manually selecting values of X and Y here, but really what I want is
  % for Picat to *try* to find values of the x?? and y?? inputs such that
  % the z?? outputs don't equal X+Y. If we *can't* find such a counterexample,
  % then the set of swaps in the Index array, when applied, restores the
  % functioning of the adder network, and gives us our puzzle solution.
  %X #= 2**44 - 1234, % why can't they both be 2**45-1?
  %Y #= 2**45 - 1234,

  % X = 01010101010101010101010101010101010101010101 (5864062014805)
  % Y = 10101010101010101010101010101010101010101010
  % X #= 5864062014805, % why can't they both be 2**45-1?
  % Y #= 11728124029610,
  X #= 1234, % works for tiny numbers only... maybe the swaps aren't working?
  Y #= 4567,
  (X+Y #!= Z) #<=> Counterexample[1] #= 1,
  Fails #= sum(Counterexample),
  Fails #= 0, % this just prevents it from finding counterexamples...
  garbage_collect(1000000000),
  println(solving),
  %solve([],[Z]),
  solve([maxsat,$max(Fails)],[Xs,Ys,Zs,X,Y,Z,Fails,Counterexample,Index,Swapped]),
  println(swapped=Swapped),
  println([X,Y,Z]),
  Reverse_gs = new_map(),
  foreach (K=V in Gs)
    Reverse_gs.put(V,K)
  end,
  %println(rev=Reverse_gs),
  println(index=Index),
  Swaps = [],
  foreach (I in 1..Gate_count)
    if Index[I] != I then
      println(swapped=[I,Index[I]]),
      Out1 = Gate_list[I].last,
      Out2 = Gate_list[Index[I]].last,
      Swaps := [Out1|Swaps],
      Swaps := [Out2|Swaps],
    end,
  end,
  println(swaps=Swaps.remove_dups.sort),
  nl.
  %println([Gs.get(Z) : Z in Zs.sort.reverse].bin_to_dec()).

assign_number(Ds,C,Regs,Gs,V) =>
  println([C,Ds.len]),
  foreach (I in 1..Ds.len)
    Reg = Gs.get(to_fstring("%w%02d",C,I-1)),
    Regs[Reg] #= K,
    Ds[I] #= K
  end,
  to_num_unsigned(Ds,V).

op(X,"AND",Y,Z) :-
  Z #= cond(X #= 1 #/\ Y #= 1, 1, 0).

op(X,"OR",Y,Z) :-
  Z #= cond(X #= 1 #\/ Y #= 1, 1, 0).  

op(X,"XOR",Y,Z) :-
  Z #= cond(X #!= Y #= 1, 1, 0).    

bin_to_dec(L) = [2**(L.len-I)*L[I] : I in 1..L.len].sum.
to_num_unsigned(List, Num) =>
   Len = List.len,
   Num :: 0..2**47,
   Num #= sum([List[I]*2**(Len-I) : I in 1..Len]).

parse(S) = R =>
  Init = regex_find_all("(.+): (\\d)", S),
  Gates = regex_find_all("(.+) (AND|OR|XOR) (.+) -\\> (\\w+)", S),
  R = {Init,Gates}.
