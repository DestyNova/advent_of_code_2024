% Part 2 program mostly liberated from Hakan Kjellerstrand

% The plan here was for Picat to *try* to find values of the x?? and y??
% inputs such that the z?? outputs don't equal X+Y. If we *can't* find
% such a counterexample, then the set of swaps in the Index array, when
% applied, restores the functioning of the adder network, and gives us our
% puzzle solution.
% Sadly I couldn't find a meaningful way to express that. Proof systems like Liquid
% Haskell, as I understand it, prove statements by testing that the negation of
% the statement is unsatisfiable -- i.e. there is no possible counterexample.
% I couldn't figure out how to express this in Picat while *also* searching for the
% swapped outputs. Instead, we just iterate over a few random X/Y pairs and check
% that they sum correctly after applying the swaps.
import sat.
import regex.
import util.

main => read_file_chars().parse.go.

go({Inits,Gate_list}) => 
  Gate_count = Gate_list.len,
  All_gates = fold((++),[],[[G1,G2,Res] : [G1,_,G2,Res] in Gate_list]).remove_dups.sort,
  N = All_gates.len,
  println(all_gates=[All_gates,N]),
  Gs = new_map(),
  foreach ({I,G} in zip(1..N, All_gates))
    Gs.put(G,I)
  end,
  Iters = 8,
  Regs = new_array(Iters,N),
  Regs :: 0..1,

  % indirection table for gates: most gate indices point to the same index in the outputs
  % Index[I] #!= I implies gate I's output has been swapped with another gate's output
  Swapped = new_array(Gate_count),
  Swapped :: 0..1,
  Index = new_array(Gate_count),
  Index :: 1..Gate_count,
  all_different(Index),

  Counterexample = new_array(Iters),
  Counterexample :: 0..1,
  _ = random(1),

  Bits = 45,
  foreach (Iter in 1..Iters)
    % Outputs maps from gate index to the "true" output register
    Outputs = new_array(Gate_count),
    Outputs :: 0..1,

    % encode the instructions
    foreach(I in 1..Gate_count)
      [X,Op,Y,Reg_name] = Gate_list[I],
      Xv = Regs[Iter,Gs.get(X)],
      Yv = Regs[Iter,Gs.get(Y)],
      K = Gs.get(Reg_name),
      element(K,Regs[Iter],Reg),
      element(I,Index,I2), % I2 is the gate index whose register should be written to
      element(I2,Index,I), % either this gate, or another gate that should write to this reg
      S :: 0..1,
      I #!= I2 #=> S #= 1,
      I #= I2 #=> S #= 0,
      %S #= cond(I #= I2, 0, 1),
      element(I,Swapped,S),
      element(I2,Swapped,S),

      element(I2,Outputs,Reg), % swap destination register to another gate output
      element(I,Outputs,Dest), % true output of this gate (may be a different register)
      S #= 0 #=> Reg #= Dest,  % this doesn't help
      op(Xv,Op,Yv,Dest),
    end,
    exactly(8,Swapped,1),

    Xs = new_array(Bits), Ys = new_array(Bits), Zs = new_array(Bits + 1),
    assign_number(Xs,x,Regs[Iter],Gs,X),
    assign_number(Ys,y,Regs[Iter],Gs,Y),
    assign_number(Zs,z,Regs[Iter],Gs,Z),
    X #> 0, Y #> 0,
    X1 = (frand()*2**Bits).to_int,
    Y1 = (frand()*2**Bits).to_int,
    X #= X1, Y #= Y1,
    Err #= abs(X+Y-Z),
    (X+Y #!= Z) #<=> Counterexample[Iter] #= 1,
  end,
  Fails :: 0..Iters, % moving this before the above 2 lines breaks the solve?
  Fails #= sum(Counterexample),
  Fails #= 0,
  %show_all_regs(Gs,Regs),
  println(solving),
  %solve([maxsat,$min(Err),$max(Fails)],[X,Y,Z,Fails,Counterexample,Index,Swapped,Regs,Outputs]),
  solve([],[Regs,Index]),
  println(failed=Fails),
  Reverse_gs = new_map(),
  foreach (K=V in Gs)
    Reverse_gs.put(V,K)
  end,
  Swaps = [],
  foreach (I in 1..Gate_count)
    if Index[I] > I then
      println(swapped=[I,Index[I]]),
      println(Gate_list[I]),
      println(Gate_list[Index[I]]),
      Out1 = Gate_list[I].last,
      Out2 = Gate_list[Index[I]].last,
      Swaps := [Out1|Swaps],
      Swaps := [Out2|Swaps],
    end,
  end,
  println(swaps=Swaps.sort).

show_all_regs(Gs,Regs) =>
  foreach (K in Gs.keys.sort)
    printf("%w = %w\n", K, Regs[Gs.get(K)])
  end.

show_regs(C,Gs,Regs) =>
  printf("%w: ", C),
  foreach (I in 1..46)
    K = to_fstring("%w%02d",C,46-I),
    if Gs.has_key(K) then
      print(Regs[Gs.get(K)])
    else
      print(" ")
    end,
  end,
  nl.

assign_number(Ds,C,Regs,Gs,V) =>
  foreach (I in 1..Ds.len)
    K = to_fstring("%w%02d",C,I-1),
    Reg = Gs.get(K),
    Ds[Ds.len-I+1] #= Regs[Reg],
  end,
  to_num_unsigned(Ds,V).

op(X,"AND",Y,Z) => (X #= 1 #/\ Y #= 1) #=> Z #= 1, (X #= 0 #\/ Y #= 0) #=> Z #= 0.
op(X,"OR",Y,Z) => (X #= 1 #\/ Y #= 1) #<=> Z.
op(X,"XOR",Y,Z) => (X #!= Y) #<=> Z.

bin_to_dec(L) = [2**(L.len-I)*L[I] : I in 1..L.len].sum.
to_num_unsigned(List, Num) =>
  Len = List.len,
  Num #= sum([List[I]*2**(Len-I) : I in 1..Len]).

parse(S) = R =>
  Init = regex_find_all("(.+): (\\d)", S),
  Gates = regex_find_all("(.+) (AND|OR|XOR) (.+) -\\> (\\w+)", S),
  R = {Init,Gates}.
