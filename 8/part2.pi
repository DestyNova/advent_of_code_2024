import util.

main =>
  G = read_file_lines(),
  Fs = [C : C in G.flatten, C != '.'].remove_dups,
  As = new_set(),
  foreach (F in Fs)
    go(F,G) ; true,
  end,
  println(get_global_map(antis).size).

go(F,G) ?=>
  nth(Y1,G,Row1), nth(X1,Row1,F),
  nth(Y2,G,Row2), nth(X2,Row2,F),
  [A1,A2] = [{X1,Y1}, {X2,Y2}],
  A1 != A2,
  [A1,A2] = [A1,A2].sort,

  [{I1,J1}, {I2,J2}] = [A1,A2],
  X_dist = I2-I1,
  Y_dist = J2-J1,

  Hops = 0,
  while (true)
    Anti1 = {I1-Hops*X_dist, J1-Hops*Y_dist},
    In_bounds1 = cond(in_bounds(Anti1,G), true, false),
    if (In_bounds1) then
      save_antinode(Anti1),
    end,

    Anti2 = {I2+Hops*X_dist, J2+Hops*Y_dist},
    In_bounds2 = cond(in_bounds(Anti2,G), true, false),
    if (In_bounds2) then
      save_antinode(Anti2),
    end,

    % there must be a much less ugly way of doing this
    if (not In_bounds1 && not In_bounds2) then
      fail,
    end,

    Hops := Hops + 1,
  end.

in_bounds({X,Y}, G) =>
  Y >= 1, Y <= G.len,
  X >= 1, X <= G[1].len.

save_antinode(A) => get_global_map(antis).put(A).
