module planner_star.

best_plan_star(S0,Plan,Cost) =>
  % TODO: check if heuristic is implemented, but how?
  %Heuristic = cond(nonvar(heuristic), heuristic, no_heuristic),
  Dists = new_map(),
  dijkstra(S0,0,action,final,heuristic,Final,Dists,Prevs),
  Plan = construct_plan(Final,Prevs,[]),
  Final != none,
  Cost = Dists.get(Final).

construct_plan(S,Prevs) = construct_plan(S,Prevs,[]).reverse.

% TODO: move to a graph module
dijkstra(Start,Init_cost,Successor_fn,Final,Dists,Prevs) =>
  dijkstra(Start,Init_cost,Successor_fn,no_final,no_heuristic,Final,Dists,Prevs).

dijkstra(Start,Init_cost,Successor_fn,Final_fn,Heuristic_fn,Final,Dists,Prevs) =>
  Q = new_min_heap([{Init_cost,Start}]),
  Dists.put(Start, 0),
  Prevs = new_set(),
  Inf = maxint_small(),
  S_final = none,

  while (Q.heap_size() > 0 && S_final = none)
    {Cost,S} = Q.heap_pop(),
    if call(Final_fn,S) then
      S_final := S,
    else

      Successors = find_all({S1,Action,Move_cost}, call(Successor_fn,S,S1,Action,Move_cost)),
      foreach ({S1,Action,Move_cost} in Successors)
        Cost_s1 = Dists.get(S1,Inf),
        if Cost+Move_cost < Cost_s1 && not(Prevs.has_key(S1)) then
          Prevs.put(S1,{S,Action}),
          Dists.put(S1, Cost+Move_cost),
          Q.heap_push({Cost+Move_cost,S1})
        end,
      end,
    end,
  end,

  Final = S_final. % why can't I update an "out" parameter with := directly?

private
no_heuristic(_) = 0.
no_final(_) => false.

successors(S,Ctx) = find_all({S1,Cost}, action(S,S1,Ctx,Cost)).

construct_plan(S,Prevs,Acc) = R =>
  if Prevs.has_key(S) then
    {S0,Action} = Prevs.get(S),
    R = construct_plan(S0,Prevs,[Action|Acc])
  else
    R = Acc,
  end.
